import { test, expect } from '@playwright/test';\n\n// Test data\nconst testUser = {\n  email: 'dashboard-test@example.com',\n  password: 'TestPassword123!',\n  name: 'Dashboard Test User'\n};\n\ntest.describe('Dashboard Feature', () => {\n  test.beforeEach(async ({ page }) => {\n    // Ensure we start with a clean state\n    await page.goto('/login');\n    \n    // Register and login user if needed\n    try {\n      await page.fill('input[name=\"email\"]', testUser.email);\n      await page.fill('input[name=\"password\"]', testUser.password);\n      await page.click('button[type=\"submit\"]');\n      \n      // If login fails, try registration\n      if (await page.locator('text=Invalid credentials').isVisible()) {\n        await page.goto('/register');\n        await page.fill('input[name=\"name\"]', testUser.name);\n        await page.fill('input[name=\"email\"]', testUser.email);\n        await page.fill('input[name=\"password\"]', testUser.password);\n        await page.click('button[type=\"submit\"]');\n        \n        // Should auto-login and redirect to dashboard\n        await expect(page).toHaveURL('/dashboard');\n      }\n    } catch (error) {\n      // If user already exists, just login\n      await page.goto('/login');\n      await page.fill('input[name=\"email\"]', testUser.email);\n      await page.fill('input[name=\"password\"]', testUser.password);\n      await page.click('button[type=\"submit\"]');\n    }\n    \n    // Ensure we're on the dashboard\n    await expect(page).toHaveURL('/dashboard');\n  });\n\n  // Scenario 1: Successful Dashboard Load\n  test('should load dashboard successfully with all sections', async ({ page }) => {\n    // Wait for dashboard to load completely\n    await expect(page.locator('h1:has-text(\"Welcome back\")')).toBeVisible({ timeout: 10000 });\n    \n    // Verify all main sections are present\n    await expect(page.locator('h2:has-text(\"Your Progress\")')).toBeVisible();\n    await expect(page.locator('h2:has-text(\"Grammar Modules\")')).toBeVisible();\n    await expect(page.locator('h2:has-text(\"Quick Actions\")')).toBeVisible();\n    await expect(page.locator('h3:has-text(\"Learning Stats\")')).toBeVisible();\n    \n    // Verify progress data is loaded within 3 seconds\n    const startTime = Date.now();\n    await expect(page.locator('[role=\"progressbar\"]')).toBeVisible();\n    const loadTime = Date.now() - startTime;\n    expect(loadTime).toBeLessThan(3000);\n  });\n\n  // Scenario 2: Authentication Failure Recovery\n  test('should handle authentication failure and recovery', async ({ page }) => {\n    // Simulate expired session by clearing storage\n    await page.evaluate(() => {\n      localStorage.removeItem('grammar_anatomy_token');\n    });\n    \n    // Refresh page to trigger auth check\n    await page.reload();\n    \n    // Should redirect to login\n    await expect(page).toHaveURL('/login');\n    \n    // Re-authenticate\n    await page.fill('input[name=\"email\"]', testUser.email);\n    await page.fill('input[name=\"password\"]', testUser.password);\n    await page.click('button[type=\"submit\"]');\n    \n    // Should return to dashboard with all data\n    await expect(page).toHaveURL('/dashboard');\n    await expect(page.locator('h1:has-text(\"Welcome back\")')).toBeVisible();\n  });\n\n  // Scenario 3: Real-time Progress Updates\n  test('should update progress data every 30 seconds', async ({ page }) => {\n    // Get initial last updated time\n    const initialTime = await page.locator('text=Last updated:').textContent();\n    \n    // Wait for auto-refresh (30 seconds + buffer)\n    await page.waitForTimeout(32000);\n    \n    // Check if last updated time changed\n    const updatedTime = await page.locator('text=Last updated:').textContent();\n    expect(updatedTime).not.toBe(initialTime);\n  });\n\n  // Scenario 4: Module Completion Flow\n  test('should display module completion status correctly', async ({ page }) => {\n    // Check if modules are displayed\n    await expect(page.locator('[data-testid=\"modules-list\"], .bg-gray-50:has(svg)')).toBeVisible();\n    \n    // Verify status badges are present\n    const statusBadges = page.locator('span:has-text(\"Completed\"), span:has-text(\"In Progress\"), span:has-text(\"Not Started\")');\n    await expect(statusBadges.first()).toBeVisible();\n    \n    // Verify progress bars are present\n    await expect(page.locator('[role=\"progressbar\"]')).toBeVisible();\n  });\n\n  // Scenario 5: Continue Learning Action\n  test('should navigate to appropriate lesson when Continue Learning is clicked', async ({ page }) => {\n    // Click Continue Learning button\n    const continueButton = page.locator('button:has-text(\"Continue Learning\")');\n    await expect(continueButton).toBeVisible();\n    await continueButton.click();\n    \n    // Should navigate to modules page or specific module\n    await expect(page).toHaveURL(/\\/(modules|lessons)/);\n  });\n\n  // Scenario 6: Review Session Launch\n  test('should launch review session when available', async ({ page }) => {\n    // Look for review session button\n    const reviewButton = page.locator('button:has-text(\"Review Session\")');\n    \n    if (await reviewButton.isEnabled()) {\n      await reviewButton.click();\n      await expect(page).toHaveURL('/review');\n    } else {\n      // Should show disabled state for new users\n      await expect(reviewButton).toBeDisabled();\n    }\n  });\n\n  // Scenario 7: Practice Quiz Access\n  test('should access practice quiz when lessons are completed', async ({ page }) => {\n    const quizButton = page.locator('button:has-text(\"Practice Quiz\")');\n    \n    if (await quizButton.isEnabled()) {\n      await quizButton.click();\n      // Should navigate to quiz or modules page\n      await expect(page).toHaveURL(/\\/(modules|quiz)/);\n    } else {\n      // Should show \"Complete lessons to unlock\" message\n      await expect(page.locator('text=Complete lessons to unlock')).toBeVisible();\n    }\n  });\n\n  // Scenario 8: Network Connectivity Issues\n  test('should handle network errors gracefully', async ({ page }) => {\n    // Simulate network failure\n    await page.route('/api/v1/progress/summary', route => {\n      route.abort('failed');\n    });\n    \n    // Reload page to trigger API calls\n    await page.reload();\n    \n    // Should show error state or retry option\n    await expect(\n      page.locator('button:has-text(\"Try Again\"), button:has-text(\"Retry\")')\n    ).toBeVisible({ timeout: 10000 });\n  });\n\n  // Scenario 9: Partial Data Load Failures\n  test('should handle partial API failures', async ({ page }) => {\n    // Mock partial failure - progress succeeds, modules fails\n    await page.route('/api/v1/modules', route => {\n      route.abort('failed');\n    });\n    \n    await page.reload();\n    \n    // Should show error notification or retry option\n    await expect(\n      page.locator('text=connection issues, button:has-text(\"Retry\")')\n    ).toBeVisible({ timeout: 10000 });\n  });\n\n  // Scenario 10: New User Experience\n  test('should display appropriate content for new users', async ({ page }) => {\n    // Check for motivational messages for new users\n    const motivationalText = page.locator(\n      'text=Welcome to your grammar journey, text=Start your first lesson, text=Every lesson brings you closer'\n    );\n    \n    // At least one motivational message should be visible\n    await expect(motivationalText.first()).toBeVisible();\n    \n    // Quick actions should be appropriately enabled/disabled\n    await expect(page.locator('button:has-text(\"Continue Learning\")')).toBeEnabled();\n    await expect(page.locator('button:has-text(\"Anatomy Lab\")')).toBeEnabled();\n  });\n\n  // Scenario 11: Keyboard Navigation\n  test('should support full keyboard navigation', async ({ page }) => {\n    // Focus on the page\n    await page.keyboard.press('Tab');\n    \n    // Tab through interactive elements\n    const interactiveElements = [\n      'button:has-text(\"Continue Learning\")',\n      'button:has-text(\"Practice Quiz\")',\n      'button:has-text(\"Anatomy Lab\")',\n      'button:has-text(\"Review Session\")',\n      'a:has-text(\"View All\")',\n      'a:has-text(\"Glossary\")',\n      'a:has-text(\"AI Guru\")'\n    ];\n    \n    for (const selector of interactiveElements) {\n      const element = page.locator(selector);\n      if (await element.isVisible()) {\n        // Should be focusable\n        await element.focus();\n        await expect(element).toBeFocused();\n        \n        // Should be activatable with Enter/Space\n        await page.keyboard.press('Tab');\n      }\n    }\n  });\n\n  // Scenario 12: Screen Reader Compatibility\n  test('should have proper accessibility attributes', async ({ page }) => {\n    // Check for proper ARIA labels and roles\n    await expect(page.locator('[role=\"progressbar\"]')).toBeVisible();\n    \n    // Progress bars should have aria-labels\n    const progressBars = page.locator('[role=\"progressbar\"]');\n    const count = await progressBars.count();\n    \n    for (let i = 0; i < count; i++) {\n      const progressBar = progressBars.nth(i);\n      await expect(progressBar).toHaveAttribute('aria-valuenow');\n      await expect(progressBar).toHaveAttribute('aria-valuemin', '0');\n      await expect(progressBar).toHaveAttribute('aria-valuemax', '100');\n    }\n    \n    // Check for proper heading hierarchy\n    await expect(page.locator('h1')).toBeVisible();\n    await expect(page.locator('h2')).toBeVisible();\n    await expect(page.locator('h3')).toBeVisible();\n  });\n\n  // Scenario 13: Large Data Set Handling\n  test('should handle large datasets efficiently', async ({ page }) => {\n    // Navigate to modules page to test large lists\n    await page.locator('a:has-text(\"View All\")')?.click();\n    \n    // Page should load within performance requirements\n    const startTime = Date.now();\n    await expect(page.locator('h2:has-text(\"Modules\")')).toBeVisible();\n    const loadTime = Date.now() - startTime;\n    \n    expect(loadTime).toBeLessThan(5000); // Should load within 5 seconds\n    \n    // Scrolling should remain smooth (check for no console errors)\n    await page.keyboard.press('PageDown');\n    await page.keyboard.press('PageUp');\n  });\n\n  // Scenario 14: Concurrent User Simulation\n  test('should handle user-specific data correctly', async ({ page, context }) => {\n    // Get current user's name from dashboard\n    const userName = await page.locator('h1:has-text(\"Welcome back\")').textContent();\n    expect(userName).toContain(testUser.name);\n    \n    // Verify data is user-specific\n    await expect(page.locator('h1')).toContainText(testUser.name);\n    \n    // Check that modules and progress are loaded\n    await expect(page.locator('h2:has-text(\"Your Progress\")')).toBeVisible();\n  });\n\n  // Scenario 15: Mobile Responsiveness\n  test('should work properly on mobile devices', async ({ page }) => {\n    // Set mobile viewport\n    await page.setViewportSize({ width: 375, height: 667 });\n    \n    // All main sections should still be visible\n    await expect(page.locator('h1:has-text(\"Welcome back\")')).toBeVisible();\n    await expect(page.locator('h2:has-text(\"Your Progress\")')).toBeVisible();\n    await expect(page.locator('h2:has-text(\"Quick Actions\")')).toBeVisible();\n    \n    // Touch targets should be large enough (44px minimum)\n    const buttons = page.locator('button');\n    const count = await buttons.count();\n    \n    for (let i = 0; i < Math.min(count, 5); i++) {\n      const button = buttons.nth(i);\n      if (await button.isVisible()) {\n        const box = await button.boundingBox();\n        if (box) {\n          expect(box.height).toBeGreaterThanOrEqual(44);\n          expect(box.width).toBeGreaterThanOrEqual(44);\n        }\n      }\n    }\n    \n    // No horizontal scrolling should be required\n    const bodyWidth = await page.locator('body').evaluate(el => el.scrollWidth);\n    const viewportWidth = await page.viewportSize()?.width || 375;\n    expect(bodyWidth).toBeLessThanOrEqual(viewportWidth + 1); // Allow 1px tolerance\n  });\n\n  // Additional comprehensive tests\n  test('should display correct progress percentages and statistics', async ({ page }) => {\n    // Check that progress percentages are displayed\n    const progressText = page.locator('text=/\\d+%/');\n    await expect(progressText.first()).toBeVisible();\n    \n    // Check that statistics are displayed\n    await expect(page.locator('text=Total Modules')).toBeVisible();\n    await expect(page.locator('text=Completed Lessons')).toBeVisible();\n    await expect(page.locator('text=Exercises Done')).toBeVisible();\n  });\n\n  test('should support dark mode toggle', async ({ page }) => {\n    // Look for dark mode toggle in header\n    const darkModeToggle = page.locator('button[aria-label*=\"dark\"], button:has(svg):has([data-testid=\"sun\"]), button:has(svg):has([data-testid=\"moon\"])');\n    \n    if (await darkModeToggle.isVisible()) {\n      // Toggle dark mode\n      await darkModeToggle.click();\n      \n      // Check that dark mode classes are applied\n      await expect(page.locator('html.dark, body.dark, .dark')).toBeVisible();\n      \n      // Toggle back\n      await darkModeToggle.click();\n    }\n  });\n\n  test('should handle quick action navigation correctly', async ({ page }) => {\n    // Test Anatomy Lab navigation\n    const anatomyLabButton = page.locator('button:has-text(\"Anatomy Lab\")');\n    await anatomyLabButton.click();\n    await expect(page).toHaveURL('/anatomy-lab');\n    \n    // Go back to dashboard\n    await page.goto('/dashboard');\n    \n    // Test other navigation links\n    const glossaryLink = page.locator('a:has-text(\"Glossary\")');\n    if (await glossaryLink.isVisible()) {\n      await glossaryLink.click();\n      await expect(page).toHaveURL('/glossary');\n    }\n  });\n\n  test('should display loading states appropriately', async ({ page }) => {\n    // Reload page and check for loading states\n    await page.reload();\n    \n    // Should show loading indicators initially\n    const loadingIndicators = page.locator('.animate-pulse, text=Loading');\n    \n    // Loading should be visible briefly, then disappear\n    if (await loadingIndicators.first().isVisible({ timeout: 1000 })) {\n      await expect(loadingIndicators.first()).toBeVisible();\n      await expect(loadingIndicators.first()).not.toBeVisible({ timeout: 10000 });\n    }\n  });\n});\n"