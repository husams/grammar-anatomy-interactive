<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="61" failures="0" errors="0" time="0.597">
  <testsuite name="ModuleCard" errors="0" failures="0" skipped="0" timestamp="2025-06-25T10:16:25" time="0.185" tests="16">
    <testcase classname="ModuleCard renders module information correctly" name="ModuleCard renders module information correctly" time="0.017">
    </testcase>
    <testcase classname="ModuleCard displays progress information" name="ModuleCard displays progress information" time="0.003">
    </testcase>
    <testcase classname="ModuleCard shows correct status badge for in progress module" name="ModuleCard shows correct status badge for in progress module" time="0.003">
    </testcase>
    <testcase classname="ModuleCard shows correct status badge for completed module" name="ModuleCard shows correct status badge for completed module" time="0.002">
    </testcase>
    <testcase classname="ModuleCard shows correct status badge for not started module" name="ModuleCard shows correct status badge for not started module" time="0.004">
    </testcase>
    <testcase classname="ModuleCard displays difficulty badge when provided" name="ModuleCard displays difficulty badge when provided" time="0.002">
    </testcase>
    <testcase classname="ModuleCard shows correct action link text based on status" name="ModuleCard shows correct action link text based on status" time="0.006">
    </testcase>
    <testcase classname="ModuleCard calls onClick when card is clicked" name="ModuleCard calls onClick when card is clicked" time="0.011">
    </testcase>
    <testcase classname="ModuleCard calls onClick when Enter key is pressed" name="ModuleCard calls onClick when Enter key is pressed" time="0.003">
    </testcase>
    <testcase classname="ModuleCard calls onClick when Space key is pressed" name="ModuleCard calls onClick when Space key is pressed" time="0.002">
    </testcase>
    <testcase classname="ModuleCard has correct accessibility attributes" name="ModuleCard has correct accessibility attributes" time="0.005">
    </testcase>
    <testcase classname="ModuleCard renders progress bar with correct width" name="ModuleCard renders progress bar with correct width" time="0.004">
    </testcase>
    <testcase classname="ModuleCard shows recently accessed indicator when last_accessed is provided" name="ModuleCard shows recently accessed indicator when last_accessed is provided" time="0.001">
    </testcase>
    <testcase classname="ModuleCard does not show recently accessed indicator when last_accessed is not provided" name="ModuleCard does not show recently accessed indicator when last_accessed is not provided" time="0.002">
    </testcase>
    <testcase classname="ModuleCard renders without difficulty badge when not provided" name="ModuleCard renders without difficulty badge when not provided" time="0.001">
    </testcase>
    <testcase classname="ModuleCard does not show estimated completion time when it is 0" name="ModuleCard does not show estimated completion time when it is 0" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ModuleSearch" errors="0" failures="0" skipped="0" timestamp="2025-06-25T10:16:25" time="0.087" tests="17">
    <testcase classname="ModuleSearch renders with correct initial value" name="ModuleSearch renders with correct initial value" time="0.011">
    </testcase>
    <testcase classname="ModuleSearch renders with correct placeholder" name="ModuleSearch renders with correct placeholder" time="0.003">
    </testcase>
    <testcase classname="ModuleSearch shows search icon initially" name="ModuleSearch shows search icon initially" time="0.002">
    </testcase>
    <testcase classname="ModuleSearch updates local value immediately on input change" name="ModuleSearch updates local value immediately on input change" time="0.004">
    </testcase>
    <testcase classname="ModuleSearch calls onChange after debounce delay" name="ModuleSearch calls onChange after debounce delay" time="0.005">
    </testcase>
    <testcase classname="ModuleSearch shows loading spinner during search" name="ModuleSearch shows loading spinner during search" time="0.005">
    </testcase>
    <testcase classname="ModuleSearch shows clear button when there is input" name="ModuleSearch shows clear button when there is input" time="0.001">
    </testcase>
    <testcase classname="ModuleSearch does not show clear button when input is empty" name="ModuleSearch does not show clear button when input is empty" time="0.001">
    </testcase>
    <testcase classname="ModuleSearch clears input when clear button is clicked" name="ModuleSearch clears input when clear button is clicked" time="0.002">
    </testcase>
    <testcase classname="ModuleSearch clears input when Escape key is pressed" name="ModuleSearch clears input when Escape key is pressed" time="0.004">
    </testcase>
    <testcase classname="ModuleSearch cancels previous debounced calls when new input is typed" name="ModuleSearch cancels previous debounced calls when new input is typed" time="0.004">
    </testcase>
    <testcase classname="ModuleSearch is disabled when disabled prop is true" name="ModuleSearch is disabled when disabled prop is true" time="0.002">
    </testcase>
    <testcase classname="ModuleSearch updates when value prop changes externally" name="ModuleSearch updates when value prop changes externally" time="0.003">
    </testcase>
    <testcase classname="ModuleSearch shows search hint text when there is input" name="ModuleSearch shows search hint text when there is input" time="0.001">
    </testcase>
    <testcase classname="ModuleSearch has correct accessibility attributes" name="ModuleSearch has correct accessibility attributes" time="0.002">
    </testcase>
    <testcase classname="ModuleSearch applies custom className" name="ModuleSearch applies custom className" time="0.002">
    </testcase>
    <testcase classname="ModuleSearch uses custom debounce time" name="ModuleSearch uses custom debounce time" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ProgressService" errors="0" failures="0" skipped="0" timestamp="2025-06-25T10:16:25" time="0.175" tests="28">
    <testcase classname="ProgressService mergeModulesWithProgress merges modules with existing progress data" name="ProgressService mergeModulesWithProgress merges modules with existing progress data" time="0.001">
    </testcase>
    <testcase classname="ProgressService mergeModulesWithProgress creates default progress for modules without progress data" name="ProgressService mergeModulesWithProgress creates default progress for modules without progress data" time="0">
    </testcase>
    <testcase classname="ProgressService calculateEstimatedCompletion calculates remaining time correctly" name="ProgressService calculateEstimatedCompletion calculates remaining time correctly" time="0">
    </testcase>
    <testcase classname="ProgressService calculateEstimatedCompletion returns 0 for 100% completion" name="ProgressService calculateEstimatedCompletion returns 0 for 100% completion" time="0">
    </testcase>
    <testcase classname="ProgressService calculateEstimatedCompletion returns full duration for 0% completion" name="ProgressService calculateEstimatedCompletion returns full duration for 0% completion" time="0">
    </testcase>
    <testcase classname="ProgressService calculateModuleStatus returns not_started when no lessons completed" name="ProgressService calculateModuleStatus returns not_started when no lessons completed" time="0">
    </testcase>
    <testcase classname="ProgressService calculateModuleStatus returns completed when all lessons completed" name="ProgressService calculateModuleStatus returns completed when all lessons completed" time="0">
    </testcase>
    <testcase classname="ProgressService calculateModuleStatus returns in_progress for partial completion" name="ProgressService calculateModuleStatus returns in_progress for partial completion" time="0">
    </testcase>
    <testcase classname="ProgressService calculateProgressPercentage calculates percentage correctly" name="ProgressService calculateProgressPercentage calculates percentage correctly" time="0">
    </testcase>
    <testcase classname="ProgressService calculateProgressPercentage returns 0 for zero total lessons" name="ProgressService calculateProgressPercentage returns 0 for zero total lessons" time="0">
    </testcase>
    <testcase classname="ProgressService calculateProgressPercentage rounds to nearest integer" name="ProgressService calculateProgressPercentage rounds to nearest integer" time="0">
    </testcase>
    <testcase classname="ProgressService sortModulesWithProgress sorts by order ascending" name="ProgressService sortModulesWithProgress sorts by order ascending" time="0.001">
    </testcase>
    <testcase classname="ProgressService sortModulesWithProgress sorts by title descending" name="ProgressService sortModulesWithProgress sorts by title descending" time="0.005">
    </testcase>
    <testcase classname="ProgressService sortModulesWithProgress sorts by progress percentage" name="ProgressService sortModulesWithProgress sorts by progress percentage" time="0">
    </testcase>
    <testcase classname="ProgressService sortModulesWithProgress sorts by last accessed" name="ProgressService sortModulesWithProgress sorts by last accessed" time="0">
    </testcase>
    <testcase classname="ProgressService filterModules filters by search query" name="ProgressService filterModules filters by search query" time="0">
    </testcase>
    <testcase classname="ProgressService filterModules filters by status" name="ProgressService filterModules filters by status" time="0.001">
    </testcase>
    <testcase classname="ProgressService filterModules filters by both search and status" name="ProgressService filterModules filters by both search and status" time="0">
    </testcase>
    <testcase classname="ProgressService filterModules returns all modules when no filters applied" name="ProgressService filterModules returns all modules when no filters applied" time="0">
    </testcase>
    <testcase classname="ProgressService getOverallStats calculates overall statistics correctly" name="ProgressService getOverallStats calculates overall statistics correctly" time="0">
    </testcase>
    <testcase classname="ProgressService getOverallStats handles empty modules array" name="ProgressService getOverallStats handles empty modules array" time="0">
    </testcase>
    <testcase classname="ProgressService getNextRecommendedModule returns in progress module as recommendation" name="ProgressService getNextRecommendedModule returns in progress module as recommendation" time="0">
    </testcase>
    <testcase classname="ProgressService getNextRecommendedModule returns first not started module when no in progress modules" name="ProgressService getNextRecommendedModule returns first not started module when no in progress modules" time="0">
    </testcase>
    <testcase classname="ProgressService getNextRecommendedModule returns null when all modules are completed" name="ProgressService getNextRecommendedModule returns null when all modules are completed" time="0">
    </testcase>
    <testcase classname="ProgressService isModuleAvailable returns true for first module" name="ProgressService isModuleAvailable returns true for first module" time="0">
    </testcase>
    <testcase classname="ProgressService isModuleAvailable returns true when previous module is completed" name="ProgressService isModuleAvailable returns true when previous module is completed" time="0">
    </testcase>
    <testcase classname="ProgressService isModuleAvailable returns true when previous module is in progress" name="ProgressService isModuleAvailable returns true when previous module is in progress" time="0">
    </testcase>
    <testcase classname="ProgressService isModuleAvailable returns false when previous module is not started" name="ProgressService isModuleAvailable returns false when previous module is not started" time="0">
    </testcase>
  </testsuite>
</testsuites>