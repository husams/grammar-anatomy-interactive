import React from 'react';\nimport { render, screen, waitFor, act } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport '@testing-library/jest-dom';\nimport DashboardPage from '../DashboardPage';\nimport { AuthProvider } from '../../contexts/AuthContext';\n\n// Mock the dashboard components\njest.mock('../../components/dashboard/ProgressOverview', () => {\n  return function MockProgressOverview({ progressSummary, isLoading }: any) {\n    if (isLoading) return <div data-testid=\"progress-loading\">Loading Progress...</div>;\n    return (\n      <div data-testid=\"progress-overview\">\n        Progress: {progressSummary.overall_progress_percentage}%\n      </div>\n    );\n  };\n});\n\njest.mock('../../components/dashboard/ModulesList', () => {\n  return function MockModulesList({ modules, moduleProgress, isLoading }: any) {\n    if (isLoading) return <div data-testid=\"modules-loading\">Loading Modules...</div>;\n    return (\n      <div data-testid=\"modules-list\">\n        Modules: {modules.length}\n      </div>\n    );\n  };\n});\n\njest.mock('../../components/dashboard/QuickActions', () => {\n  return function MockQuickActions({ modules, progressSummary }: any) {\n    return (\n      <div data-testid=\"quick-actions\">\n        Quick Actions for {modules.length} modules\n      </div>\n    );\n  };\n});\n\njest.mock('../../components/dashboard/LoadingStates', () => {\n  return function MockLoadingStates() {\n    return <div data-testid=\"loading-states\">Dashboard Loading...</div>;\n  };\n});\n\njest.mock('../../components/dashboard/ErrorBoundary', () => {\n  return function MockErrorBoundary({ error, onRetry }: any) {\n    return (\n      <div data-testid=\"error-boundary\">\n        Error: {error}\n        <button onClick={onRetry}>Retry</button>\n      </div>\n    );\n  };\n});\n\n// Mock fetch\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\n// Mock data\nconst mockUser = {\n  id: '1',\n  name: 'John Doe',\n  email: 'john@example.com',\n  is_active: true,\n  created_at: '2023-01-01T00:00:00Z'\n};\n\nconst mockProgressSummary = {\n  total_modules: 5,\n  completed_modules: 2,\n  total_lessons: 25,\n  completed_lessons: 10,\n  total_exercises: 100,\n  completed_exercises: 40,\n  overall_progress_percentage: 40,\n  module_progress: [\n    {\n      module_id: '1',\n      module_title: 'Nouns & Verbs',\n      total_lessons: 10,\n      completed_lessons: 8,\n      progress_percentage: 80,\n      status: 'in_progress'\n    }\n  ]\n};\n\nconst mockModules = [\n  {\n    id: '1',\n    title: 'Nouns & Verbs',\n    order: 1\n  },\n  {\n    id: '2',\n    title: 'Pronouns',\n    order: 2\n  }\n];\n\n// Mock AuthContext\nconst mockAuthContext = {\n  user: mockUser,\n  token: 'mock-token',\n  isAuthenticated: true,\n  isLoading: false,\n  login: jest.fn(),\n  register: jest.fn(),\n  logout: jest.fn(),\n  clearError: jest.fn()\n};\n\njest.mock('../../contexts/AuthContext', () => ({\n  ...jest.requireActual('../../contexts/AuthContext'),\n  useAuth: () => mockAuthContext,\n  AuthProvider: ({ children }: any) => <div>{children}</div>\n}));\n\n// Wrapper component\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <BrowserRouter>\n    <AuthProvider>\n      {children}\n    </AuthProvider>\n  </BrowserRouter>\n);\n\ndescribe('DashboardPage', () => {\n  beforeEach(() => {\n    mockFetch.mockClear();\n    jest.clearAllTimers();\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.runOnlyPendingTimers();\n    jest.useRealTimers();\n  });\n\n  it('shows loading state initially', async () => {\n    // Mock successful API responses\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockProgressSummary)\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockModules)\n      });\n\n    render(\n      <TestWrapper>\n        <DashboardPage />\n      </TestWrapper>\n    );\n\n    // Should show loading state initially\n    expect(screen.getByTestId('loading-states')).toBeInTheDocument();\n  });\n\n  it('renders dashboard content after successful data fetch', async () => {\n    // Mock successful API responses\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockProgressSummary)\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockModules)\n      });\n\n    render(\n      <TestWrapper>\n        <DashboardPage />\n      </TestWrapper>\n    );\n\n    // Wait for data to load\n    await waitFor(() => {\n      expect(screen.getByText('Welcome back, John Doe!')).toBeInTheDocument();\n    });\n\n    // Check that all components are rendered\n    expect(screen.getByTestId('progress-overview')).toBeInTheDocument();\n    expect(screen.getByTestId('modules-list')).toBeInTheDocument();\n    expect(screen.getByTestId('quick-actions')).toBeInTheDocument();\n\n    // Check that data is passed correctly\n    expect(screen.getByText('Progress: 40%')).toBeInTheDocument();\n    expect(screen.getByText('Modules: 2')).toBeInTheDocument();\n  });\n\n  it('displays error state when API calls fail', async () => {\n    // Mock API failure\n    mockFetch.mockRejectedValue(new Error('API Error'));\n\n    render(\n      <TestWrapper>\n        <DashboardPage />\n      </TestWrapper>\n    );\n\n    // Wait for error state\n    await waitFor(() => {\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument();\n    });\n\n    expect(screen.getByText('Error: API Error')).toBeInTheDocument();\n  });\n\n  it('displays learning stats correctly', async () => {\n    // Mock successful API responses\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockProgressSummary)\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockModules)\n      });\n\n    render(\n      <TestWrapper>\n        <DashboardPage />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('Welcome back, John Doe!')).toBeInTheDocument();\n    });\n\n    // Check learning stats\n    expect(screen.getByText('Learning Stats')).toBeInTheDocument();\n    expect(screen.getByText('5')).toBeInTheDocument(); // Total modules\n    expect(screen.getByText('10')).toBeInTheDocument(); // Completed lessons\n    expect(screen.getByText('40')).toBeInTheDocument(); // Completed exercises\n  });\n\n  it('makes API calls with correct endpoints and headers', async () => {\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockProgressSummary)\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockModules)\n      });\n\n    render(\n      <TestWrapper>\n        <DashboardPage />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledTimes(2);\n    });\n\n    // Check API calls\n    expect(mockFetch).toHaveBeenCalledWith('/api/v1/progress/summary', {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer mock-token'\n      }\n    });\n\n    expect(mockFetch).toHaveBeenCalledWith('/api/v1/modules', {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer mock-token'\n      }\n    });\n  });\n\n  it('shows last updated timestamp', async () => {\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockProgressSummary)\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockModules)\n      });\n\n    render(\n      <TestWrapper>\n        <DashboardPage />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/Last updated:/)).toBeInTheDocument();\n    });\n  });\n\n  it('auto-refreshes data every 30 seconds', async () => {\n    mockFetch\n      .mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockProgressSummary)\n      })\n      .mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve(mockModules)\n      });\n\n    render(\n      <TestWrapper>\n        <DashboardPage />\n      </TestWrapper>\n    );\n\n    // Wait for initial load\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledTimes(2);\n    });\n\n    // Fast-forward 30 seconds\n    act(() => {\n      jest.advanceTimersByTime(30000);\n    });\n\n    // Should trigger another API call\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledTimes(4);\n    });\n  });\n\n  it('handles partial API failures gracefully', async () => {\n    // Mock progress API success but modules API failure\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockProgressSummary)\n      })\n      .mockRejectedValueOnce(new Error('Modules API Error'));\n\n    render(\n      <TestWrapper>\n        <DashboardPage />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument();\n    });\n  });\n\n  it('does not fetch data when user is not authenticated', () => {\n    // Mock unauthenticated state\n    const unauthenticatedContext = {\n      ...mockAuthContext,\n      isAuthenticated: false,\n      token: null\n    };\n\n    jest.doMock('../../contexts/AuthContext', () => ({\n      ...jest.requireActual('../../contexts/AuthContext'),\n      useAuth: () => unauthenticatedContext\n    }));\n\n    render(\n      <TestWrapper>\n        <DashboardPage />\n      </TestWrapper>\n    );\n\n    // Should not make API calls\n    expect(mockFetch).not.toHaveBeenCalled();\n  });\n\n  it('displays correct welcome message and description', async () => {\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockProgressSummary)\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockModules)\n      });\n\n    render(\n      <TestWrapper>\n        <DashboardPage />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('Welcome back, John Doe!')).toBeInTheDocument();\n      expect(screen.getByText('Track your progress and continue your grammar learning journey')).toBeInTheDocument();\n    });\n  });\n\n  it('has proper responsive layout classes', async () => {\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockProgressSummary)\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(mockModules)\n      });\n\n    render(\n      <TestWrapper>\n        <DashboardPage />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('Welcome back, John Doe!')).toBeInTheDocument();\n    });\n\n    // Check for responsive grid classes\n    expect(document.querySelector('.grid.grid-cols-1.lg\\\\:grid-cols-3')).toBeInTheDocument();\n    expect(document.querySelector('.lg\\\\:col-span-2')).toBeInTheDocument();\n  });\n});\n"