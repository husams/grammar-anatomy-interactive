import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport '@testing-library/jest-dom';\nimport ModulesList from '../ModulesList';\nimport { Module, ModuleProgressDetail } from '../../../types';\n\n// Mock react-router-dom\nconst mockNavigate = jest.fn();\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  useNavigate: () => mockNavigate,\n}));\n\n// Wrapper component for router context\nconst RouterWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <BrowserRouter>{children}</BrowserRouter>\n);\n\n// Mock data\nconst mockModules: Module[] = [\n  {\n    id: '1',\n    title: 'Nouns & Verbs',\n    order: 1,\n    status: 'in_progress'\n  },\n  {\n    id: '2',\n    title: 'Pronouns',\n    order: 2,\n    status: 'completed'\n  },\n  {\n    id: '3',\n    title: 'Adjectives',\n    order: 3,\n    status: 'not_started'\n  }\n];\n\nconst mockModuleProgress: ModuleProgressDetail[] = [\n  {\n    module_id: '1',\n    module_title: 'Nouns & Verbs',\n    total_lessons: 10,\n    completed_lessons: 6,\n    progress_percentage: 60,\n    status: 'in_progress'\n  },\n  {\n    module_id: '2',\n    module_title: 'Pronouns',\n    total_lessons: 8,\n    completed_lessons: 8,\n    progress_percentage: 100,\n    status: 'completed'\n  },\n  {\n    module_id: '3',\n    module_title: 'Adjectives',\n    total_lessons: 12,\n    completed_lessons: 0,\n    progress_percentage: 0,\n    status: 'not_started'\n  }\n];\n\ndescribe('ModulesList', () => {\n  beforeEach(() => {\n    mockNavigate.mockClear();\n  });\n\n  it('renders modules list with correct data', () => {\n    render(\n      <RouterWrapper>\n        <ModulesList modules={mockModules} moduleProgress={mockModuleProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check if main heading is rendered\n    expect(screen.getByText('Grammar Modules')).toBeInTheDocument();\n    \n    // Check if all modules are rendered\n    expect(screen.getByText('Nouns & Verbs')).toBeInTheDocument();\n    expect(screen.getByText('Pronouns')).toBeInTheDocument();\n    expect(screen.getByText('Adjectives')).toBeInTheDocument();\n    \n    // Check progress information\n    expect(screen.getByText('6 of 10 lessons completed')).toBeInTheDocument();\n    expect(screen.getByText('8 of 8 lessons completed')).toBeInTheDocument();\n    expect(screen.getByText('0 of 12 lessons completed')).toBeInTheDocument();\n  });\n\n  it('displays correct status badges for different module states', () => {\n    render(\n      <RouterWrapper>\n        <ModulesList modules={mockModules} moduleProgress={mockModuleProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check status badges\n    expect(screen.getByText('In Progress')).toBeInTheDocument();\n    expect(screen.getByText('Completed')).toBeInTheDocument();\n    expect(screen.getByText('Not Started')).toBeInTheDocument();\n  });\n\n  it('shows loading state when isLoading is true', () => {\n    render(\n      <RouterWrapper>\n        <ModulesList modules={mockModules} moduleProgress={mockModuleProgress} isLoading={true} />\n      </RouterWrapper>\n    );\n    \n    // Check for loading skeleton elements\n    const skeletonElements = document.querySelectorAll('.animate-pulse');\n    expect(skeletonElements.length).toBeGreaterThan(0);\n  });\n\n  it('displays empty state when no modules are available', () => {\n    render(\n      <RouterWrapper>\n        <ModulesList modules={[]} moduleProgress={[]} />\n      </RouterWrapper>\n    );\n    \n    expect(screen.getByText('No modules available yet')).toBeInTheDocument();\n  });\n\n  it('creates correct links to module detail pages', () => {\n    render(\n      <RouterWrapper>\n        <ModulesList modules={mockModules} moduleProgress={mockModuleProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check that module links are created correctly\n    const moduleLinks = screen.getAllByRole('link');\n    \n    // Find the specific module link (excluding header links)\n    const nounsVerbsLink = moduleLinks.find(\n      link => link.getAttribute('href') === '/modules/1'\n    );\n    expect(nounsVerbsLink).toBeInTheDocument();\n  });\n\n  it('displays progress bars with correct percentages', () => {\n    render(\n      <RouterWrapper>\n        <ModulesList modules={mockModules} moduleProgress={mockModuleProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check progress percentages\n    expect(screen.getByText('60%')).toBeInTheDocument();\n    expect(screen.getByText('100%')).toBeInTheDocument();\n    expect(screen.getByText('0%')).toBeInTheDocument();\n  });\n\n  it('shows correct module icons based on status', () => {\n    render(\n      <RouterWrapper>\n        <ModulesList modules={mockModules} moduleProgress={mockModuleProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check that different colored icons are present\n    expect(document.querySelector('.bg-green-500')).toBeInTheDocument(); // Completed\n    expect(document.querySelector('.bg-blue-500')).toBeInTheDocument(); // In Progress\n    expect(document.querySelector('.bg-gray-400')).toBeInTheDocument(); // Not Started\n  });\n\n  it('displays summary footer with completion statistics', () => {\n    render(\n      <RouterWrapper>\n        <ModulesList modules={mockModules} moduleProgress={mockModuleProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check summary text\n    expect(screen.getByText('1 of 3 modules completed')).toBeInTheDocument();\n    expect(screen.getByText('Continue Learning')).toBeInTheDocument();\n  });\n\n  it('handles modules with missing progress data', () => {\n    const modulesWithMissingProgress = [\n      {\n        id: '4',\n        title: 'New Module',\n        order: 4,\n        status: 'not_started' as const\n      }\n    ];\n    \n    render(\n      <RouterWrapper>\n        <ModulesList modules={modulesWithMissingProgress} moduleProgress={[]} />\n      </RouterWrapper>\n    );\n    \n    expect(screen.getByText('New Module')).toBeInTheDocument();\n    expect(screen.getByText('0 of 0 lessons completed')).toBeInTheDocument();\n    expect(screen.getByText('Not Started')).toBeInTheDocument();\n  });\n\n  it('sorts modules by order correctly', () => {\n    const unorderedModules = [\n      { id: '3', title: 'Third Module', order: 3, status: 'not_started' as const },\n      { id: '1', title: 'First Module', order: 1, status: 'completed' as const },\n      { id: '2', title: 'Second Module', order: 2, status: 'in_progress' as const }\n    ];\n    \n    render(\n      <RouterWrapper>\n        <ModulesList modules={unorderedModules} moduleProgress={[]} />\n      </RouterWrapper>\n    );\n    \n    const moduleElements = screen.getAllByRole('link').filter(\n      link => link.getAttribute('href')?.startsWith('/modules/')\n    );\n    \n    // Modules should be sorted by order\n    expect(moduleElements[0]).toHaveAttribute('href', '/modules/1');\n    expect(moduleElements[1]).toHaveAttribute('href', '/modules/2');\n    expect(moduleElements[2]).toHaveAttribute('href', '/modules/3');\n  });\n\n  it('has proper accessibility attributes', () => {\n    render(\n      <RouterWrapper>\n        <ModulesList modules={mockModules} moduleProgress={mockModuleProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check progress bar accessibility\n    const progressBars = screen.getAllByRole('progressbar');\n    expect(progressBars.length).toBe(3); // One for each module\n    \n    // Check that progress bars have proper labels\n    expect(screen.getByLabelText('Nouns & Verbs progress: 60%')).toBeInTheDocument();\n    expect(screen.getByLabelText('Pronouns progress: 100%')).toBeInTheDocument();\n    expect(screen.getByLabelText('Adjectives progress: 0%')).toBeInTheDocument();\n  });\n\n  it('provides hover effects for interactive elements', () => {\n    render(\n      <RouterWrapper>\n        <ModulesList modules={mockModules} moduleProgress={mockModuleProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check for hover classes\n    const moduleCards = document.querySelectorAll('.group');\n    expect(moduleCards.length).toBeGreaterThan(0);\n    \n    // Check for hover effect classes\n    expect(document.querySelector('.group-hover\\\\:text-blue-600')).toBeInTheDocument();\n    expect(document.querySelector('.group-hover\\\\:border-blue-300')).toBeInTheDocument();\n  });\n\n  it('displays View All link correctly', () => {\n    render(\n      <RouterWrapper>\n        <ModulesList modules={mockModules} moduleProgress={mockModuleProgress} />\n      </RouterWrapper>\n    );\n    \n    const viewAllLinks = screen.getAllByText('View All â†’');\n    expect(viewAllLinks[0]).toBeInTheDocument();\n    expect(viewAllLinks[0].closest('a')).toHaveAttribute('href', '/modules');\n  });\n});\n"