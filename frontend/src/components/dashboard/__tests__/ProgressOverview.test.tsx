import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport ProgressOverview from '../ProgressOverview';\nimport { UserProgressSummary } from '../../../types';\n\n// Mock data\nconst mockProgressSummary: UserProgressSummary = {\n  total_modules: 10,\n  completed_modules: 3,\n  total_lessons: 50,\n  completed_lessons: 15,\n  total_exercises: 200,\n  completed_exercises: 75,\n  overall_progress_percentage: 30,\n  module_progress: [\n    {\n      module_id: '1',\n      module_title: 'Nouns & Verbs',\n      total_lessons: 10,\n      completed_lessons: 8,\n      progress_percentage: 80,\n      status: 'in_progress'\n    },\n    {\n      module_id: '2',\n      module_title: 'Pronouns',\n      total_lessons: 8,\n      completed_lessons: 8,\n      progress_percentage: 100,\n      status: 'completed'\n    }\n  ]\n};\n\nconst mockEmptyProgressSummary: UserProgressSummary = {\n  total_modules: 0,\n  completed_modules: 0,\n  total_lessons: 0,\n  completed_lessons: 0,\n  total_exercises: 0,\n  completed_exercises: 0,\n  overall_progress_percentage: 0,\n  module_progress: []\n};\n\ndescribe('ProgressOverview', () => {\n  it('renders progress overview with correct data', () => {\n    render(<ProgressOverview progressSummary={mockProgressSummary} />);\n    \n    // Check if main heading is rendered\n    expect(screen.getByText('Your Progress')).toBeInTheDocument();\n    \n    // Check if overall progress percentage is displayed\n    expect(screen.getByText('30%')).toBeInTheDocument();\n    expect(screen.getByText('Complete')).toBeInTheDocument();\n    \n    // Check if module stats are displayed\n    expect(screen.getByText('3')).toBeInTheDocument();\n    expect(screen.getByText('/10')).toBeInTheDocument();\n    \n    // Check if lesson stats are displayed\n    expect(screen.getByText('15')).toBeInTheDocument();\n    expect(screen.getByText('/50')).toBeInTheDocument();\n    \n    // Check if exercise stats are displayed\n    expect(screen.getByText('75')).toBeInTheDocument();\n    expect(screen.getByText('/200')).toBeInTheDocument();\n  });\n\n  it('shows loading state when isLoading is true', () => {\n    render(<ProgressOverview progressSummary={mockProgressSummary} isLoading={true} />);\n    \n    // Check for loading skeleton elements\n    const skeletonElements = document.querySelectorAll('.animate-pulse');\n    expect(skeletonElements.length).toBeGreaterThan(0);\n  });\n\n  it('displays correct motivational message for different progress levels', () => {\n    // Test for low progress\n    const lowProgress = { ...mockProgressSummary, overall_progress_percentage: 10 };\n    const { rerender } = render(<ProgressOverview progressSummary={lowProgress} />);\n    expect(screen.getByText(/Welcome to your grammar journey/)).toBeInTheDocument();\n    \n    // Test for medium progress\n    const mediumProgress = { ...mockProgressSummary, overall_progress_percentage: 50 };\n    rerender(<ProgressOverview progressSummary={mediumProgress} />);\n    expect(screen.getByText(/Great job! You're halfway through/)).toBeInTheDocument();\n    \n    // Test for high progress\n    const highProgress = { ...mockProgressSummary, overall_progress_percentage: 85 };\n    rerender(<ProgressOverview progressSummary={highProgress} />);\n    expect(screen.getByText(/Excellent progress! You're almost there!/)).toBeInTheDocument();\n  });\n\n  it('handles zero values correctly', () => {\n    render(<ProgressOverview progressSummary={mockEmptyProgressSummary} />);\n    \n    // Check if zero values are displayed correctly\n    expect(screen.getByText('0%')).toBeInTheDocument();\n    expect(screen.getByText('0')).toBeInTheDocument();\n    \n    // Check motivational message for new users\n    expect(screen.getByText(/Welcome to your grammar journey/)).toBeInTheDocument();\n  });\n\n  it('animates progress bar on load', async () => {\n    render(<ProgressOverview progressSummary={mockProgressSummary} />);\n    \n    // Check that progress bar exists\n    const progressBar = screen.getByRole('progressbar');\n    expect(progressBar).toBeInTheDocument();\n    expect(progressBar).toHaveAttribute('aria-valuenow', '30');\n    expect(progressBar).toHaveAttribute('aria-valuemin', '0');\n    expect(progressBar).toHaveAttribute('aria-valuemax', '100');\n  });\n\n  it('calculates completion rates correctly', () => {\n    render(<ProgressOverview progressSummary={mockProgressSummary} />);\n    \n    // Check calculated percentages are displayed\n    // Modules: 3/10 = 30%\n    expect(screen.getByText('30% complete')).toBeInTheDocument();\n    \n    // Lessons: 15/50 = 30%\n    expect(screen.getAllByText('30% complete')).toHaveLength(2);\n    \n    // Exercises: 75/200 = 37.5% -> 38%\n    expect(screen.getByText('38% complete')).toBeInTheDocument();\n  });\n\n  it('has proper accessibility attributes', () => {\n    render(<ProgressOverview progressSummary={mockProgressSummary} />);\n    \n    // Check progress bar accessibility\n    const progressBar = screen.getByRole('progressbar');\n    expect(progressBar).toHaveAttribute('aria-label', 'Overall progress: 30%');\n    \n    // Check that all sections have proper headings\n    expect(screen.getByText('Your Progress')).toBeInTheDocument();\n    expect(screen.getByText('Modules')).toBeInTheDocument();\n    expect(screen.getByText('Lessons')).toBeInTheDocument();\n    expect(screen.getByText('Exercises')).toBeInTheDocument();\n  });\n\n  it('displays correct icons for each progress type', () => {\n    render(<ProgressOverview progressSummary={mockProgressSummary} />);\n    \n    // Check that SVG icons are present for each section\n    const svgElements = document.querySelectorAll('svg');\n    expect(svgElements.length).toBeGreaterThan(3); // At least one for each section\n  });\n\n  it('uses correct color schemes for different progress types', () => {\n    render(<ProgressOverview progressSummary={mockProgressSummary} />);\n    \n    // Check for color-specific classes\n    expect(document.querySelector('.bg-blue-50')).toBeInTheDocument(); // Modules\n    expect(document.querySelector('.bg-green-50')).toBeInTheDocument(); // Lessons\n    expect(document.querySelector('.bg-purple-50')).toBeInTheDocument(); // Exercises\n  });\n});\n"