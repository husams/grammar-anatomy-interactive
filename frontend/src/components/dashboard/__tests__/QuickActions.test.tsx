import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport '@testing-library/jest-dom';\nimport QuickActions from '../QuickActions';\nimport { Module, UserProgressSummary } from '../../../types';\n\n// Mock react-router-dom\nconst mockNavigate = jest.fn();\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  useNavigate: () => mockNavigate,\n}));\n\n// Wrapper component for router context\nconst RouterWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <BrowserRouter>{children}</BrowserRouter>\n);\n\n// Mock data\nconst mockModules: Module[] = [\n  {\n    id: '1',\n    title: 'Nouns & Verbs',\n    order: 1,\n    status: 'in_progress'\n  },\n  {\n    id: '2',\n    title: 'Pronouns',\n    order: 2,\n    status: 'completed'\n  },\n  {\n    id: '3',\n    title: 'Adjectives',\n    order: 3,\n    status: 'not_started'\n  }\n];\n\nconst mockProgressSummaryWithProgress: UserProgressSummary = {\n  total_modules: 3,\n  completed_modules: 1,\n  total_lessons: 30,\n  completed_lessons: 15,\n  total_exercises: 150,\n  completed_exercises: 75,\n  overall_progress_percentage: 50,\n  module_progress: [\n    {\n      module_id: '1',\n      module_title: 'Nouns & Verbs',\n      total_lessons: 10,\n      completed_lessons: 6,\n      progress_percentage: 60,\n      status: 'in_progress'\n    },\n    {\n      module_id: '2',\n      module_title: 'Pronouns',\n      total_lessons: 8,\n      completed_lessons: 8,\n      progress_percentage: 100,\n      status: 'completed'\n    },\n    {\n      module_id: '3',\n      module_title: 'Adjectives',\n      total_lessons: 12,\n      completed_lessons: 0,\n      progress_percentage: 0,\n      status: 'not_started'\n    }\n  ]\n};\n\nconst mockProgressSummaryNew: UserProgressSummary = {\n  total_modules: 3,\n  completed_modules: 0,\n  total_lessons: 30,\n  completed_lessons: 0,\n  total_exercises: 150,\n  completed_exercises: 0,\n  overall_progress_percentage: 0,\n  module_progress: [\n    {\n      module_id: '1',\n      module_title: 'Nouns & Verbs',\n      total_lessons: 10,\n      completed_lessons: 0,\n      progress_percentage: 0,\n      status: 'not_started'\n    },\n    {\n      module_id: '2',\n      module_title: 'Pronouns',\n      total_lessons: 8,\n      completed_lessons: 0,\n      progress_percentage: 0,\n      status: 'not_started'\n    },\n    {\n      module_id: '3',\n      module_title: 'Adjectives',\n      total_lessons: 12,\n      completed_lessons: 0,\n      progress_percentage: 0,\n      status: 'not_started'\n    }\n  ]\n};\n\ndescribe('QuickActions', () => {\n  beforeEach(() => {\n    mockNavigate.mockClear();\n  });\n\n  it('renders quick actions panel with correct content', () => {\n    render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check if main heading is rendered\n    expect(screen.getByText('Quick Actions')).toBeInTheDocument();\n    expect(screen.getByText('Jump right into your learning activities')).toBeInTheDocument();\n    \n    // Check if all action buttons are rendered\n    expect(screen.getByText('Continue Learning')).toBeInTheDocument();\n    expect(screen.getByText('Practice Quiz')).toBeInTheDocument();\n    expect(screen.getByText('Anatomy Lab')).toBeInTheDocument();\n    expect(screen.getByText('Review Session')).toBeInTheDocument();\n  });\n\n  it('shows correct continue learning text for in-progress module', () => {\n    render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    expect(screen.getByText('Resume Nouns & Verbs')).toBeInTheDocument();\n  });\n\n  it('shows correct continue learning text for new user', () => {\n    render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryNew} />\n      </RouterWrapper>\n    );\n    \n    expect(screen.getByText('Start your first lesson')).toBeInTheDocument();\n  });\n\n  it('navigates to correct module when continue learning is clicked', () => {\n    render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    const continueButton = screen.getByText('Continue Learning').closest('button');\n    fireEvent.click(continueButton!);\n    \n    expect(mockNavigate).toHaveBeenCalledWith('/modules/1');\n  });\n\n  it('navigates to modules page when no specific module found', () => {\n    const emptyModules: Module[] = [];\n    \n    render(\n      <RouterWrapper>\n        <QuickActions modules={emptyModules} progressSummary={mockProgressSummaryNew} />\n      </RouterWrapper>\n    );\n    \n    const continueButton = screen.getByText('Continue Learning').closest('button');\n    fireEvent.click(continueButton!);\n    \n    expect(mockNavigate).toHaveBeenCalledWith('/modules');\n  });\n\n  it('enables practice quiz only when lessons are completed', () => {\n    const { rerender } = render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryNew} />\n      </RouterWrapper>\n    );\n    \n    // Practice Quiz should be disabled for new users\n    const practiceQuizButton = screen.getByText('Practice Quiz').closest('button');\n    expect(practiceQuizButton).toBeDisabled();\n    expect(screen.getByText('Complete lessons to unlock')).toBeInTheDocument();\n    \n    // Practice Quiz should be enabled when lessons are completed\n    rerender(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    const enabledPracticeQuizButton = screen.getByText('Practice Quiz').closest('button');\n    expect(enabledPracticeQuizButton).not.toBeDisabled();\n  });\n\n  it('enables review session only when lessons are completed', () => {\n    const { rerender } = render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryNew} />\n      </RouterWrapper>\n    );\n    \n    // Review Session should be disabled for new users\n    const reviewButton = screen.getByText('Review Session').closest('button');\n    expect(reviewButton).toBeDisabled();\n    \n    // Review Session should be enabled when lessons are completed\n    rerender(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    const enabledReviewButton = screen.getByText('Review Session').closest('button');\n    expect(enabledReviewButton).not.toBeDisabled();\n  });\n\n  it('anatomy lab is always enabled', () => {\n    render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryNew} />\n      </RouterWrapper>\n    );\n    \n    const anatomyLabButton = screen.getByText('Anatomy Lab').closest('button');\n    expect(anatomyLabButton).not.toBeDisabled();\n  });\n\n  it('navigates to correct routes when action buttons are clicked', () => {\n    render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    // Test Anatomy Lab navigation\n    const anatomyLabButton = screen.getByText('Anatomy Lab').closest('button');\n    fireEvent.click(anatomyLabButton!);\n    expect(mockNavigate).toHaveBeenCalledWith('/anatomy-lab');\n    \n    // Test Practice Quiz navigation\n    const practiceQuizButton = screen.getByText('Practice Quiz').closest('button');\n    fireEvent.click(practiceQuizButton!);\n    expect(mockNavigate).toHaveBeenCalledWith('/modules');\n    \n    // Test Review Session navigation\n    const reviewButton = screen.getByText('Review Session').closest('button');\n    fireEvent.click(reviewButton!);\n    expect(mockNavigate).toHaveBeenCalledWith('/review');\n  });\n\n  it('displays additional links correctly', () => {\n    render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check for Glossary and AI Guru links\n    const glossaryLink = screen.getByText('Glossary').closest('a');\n    const aiGuruLink = screen.getByText('AI Guru').closest('a');\n    \n    expect(glossaryLink).toHaveAttribute('href', '/glossary');\n    expect(aiGuruLink).toHaveAttribute('href', '/ai-guru');\n  });\n\n  it('shows correct motivational message based on progress', () => {\n    const { rerender } = render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    // High progress message\n    expect(screen.getByText(/You're doing great! Keep up the momentum!/)).toBeInTheDocument();\n    \n    // Low progress message\n    rerender(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryNew} />\n      </RouterWrapper>\n    );\n    \n    expect(screen.getByText(/Every lesson brings you closer to mastery!/)).toBeInTheDocument();\n  });\n\n  it('displays correct button descriptions', () => {\n    render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    expect(screen.getByText('Test your knowledge')).toBeInTheDocument();\n    expect(screen.getByText('Analyze sentences')).toBeInTheDocument();\n    expect(screen.getByText('Refresh concepts')).toBeInTheDocument();\n  });\n\n  it('has proper hover effects for enabled buttons', () => {\n    render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check for hover effect classes\n    expect(document.querySelector('.hover\\\\:scale-105')).toBeInTheDocument();\n    expect(document.querySelector('.group-hover\\\\:opacity-100')).toBeInTheDocument();\n  });\n\n  it('displays correct icons for each action', () => {\n    render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check that SVG icons are present for each action\n    const svgElements = document.querySelectorAll('svg');\n    expect(svgElements.length).toBeGreaterThan(6); // Multiple icons expected\n  });\n\n  it('uses correct color schemes for different actions', () => {\n    render(\n      <RouterWrapper>\n        <QuickActions modules={mockModules} progressSummary={mockProgressSummaryWithProgress} />\n      </RouterWrapper>\n    );\n    \n    // Check for different background colors\n    expect(document.querySelector('.bg-blue-500')).toBeInTheDocument(); // Continue Learning\n    expect(document.querySelector('.bg-purple-500')).toBeInTheDocument(); // Practice Quiz\n    expect(document.querySelector('.bg-green-500')).toBeInTheDocument(); // Anatomy Lab\n    expect(document.querySelector('.bg-orange-500')).toBeInTheDocument(); // Review Session\n  });\n});\n"